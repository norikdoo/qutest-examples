<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.1" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler, which are provided in the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::state_machine}-->
  <class name="state_machine" superclass="qpc::QActive">
   <!--${AOs::state_machine::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::state_machine::SM}-->
   <statechart properties="0x03">
    <!--${AOs::state_machine::SM::initial}-->
    <initial target="../1">
     <action>(void)par; /* unused parameter */
/* arm the private time event to expire in 1/2s
* and periodically every 1/2 second
*/
QS_OBJ_DICTIONARY(&amp;l_state_machine);
QS_OBJ_DICTIONARY(&amp;l_state_machine.timeEvt);

QTimeEvt_armX(&amp;me-&gt;timeEvt,
    BSP_TICKS_PER_SEC/2,
    BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="2,3,5,1,20,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::state_machine::SM::state_1}-->
    <state name="state_1">
     <entry>state_1();</entry>
     <!--${AOs::state_machine::SM::state_1::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="4,14,3,3,21,-4,4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,5,16,11">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::state_machine::SM::state_2}-->
    <state name="state_2">
     <entry>state_2();</entry>
     <!--${AOs::state_machine::SM::state_2::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../3">
      <tran_glyph conn="29,14,3,3,21,-4,4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="29,5,16,11">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::state_machine::SM::state_3}-->
    <state name="state_3">
     <entry>state_3();</entry>
     <!--${AOs::state_machine::SM::state_3::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="54,14,3,3,17,5,-69,-4,2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="54,5,16,11">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="80,24"/>
   </statechart>
  </class>
  <!--${AOs::AO_state_machine}-->
  <attribute name="AO_state_machine" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;l_state_machine.super;</code>
  </attribute>
  <!--${AOs::state_machine_ctor}-->
  <operation name="state_machine_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>state_machine *me = (state_machine *)AO_state_machine;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;state_machine_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::src}-->
  <directory name="src">
   <!--${.::src::state_machine.c}-->
   <file name="state_machine.c">
    <text>#include &quot;qpc.h&quot;
#include &quot;state_machine.h&quot;
#include &quot;bsp.h&quot;

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::state_machine}

/* instantiate the Blinky active object ------------------------------------*/
static state_machine l_state_machine;

QHsm * const the_stm = (QHsm *)&amp;l_state_machine;

$define${AOs::AO_state_machine}

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::state_machine_ctor}

$define${AOs::state_machine}
</text>
   </file>
   <!--${.::src::state_machine.h}-->
   <file name="state_machine.h">
    <text>#ifndef STATE_MACHINE_H
#define STATE_MACHINE_H

enum StateMachineSignals {
    DUMMY_SIG = Q_USER_SIG,
    MAX_PUB_SIG,          /* the last published signal */

    TIMEOUT_SIG,
    MAX_SIG               /* the last signal */
};

extern QHsm * const the_stm;

$declare${AOs::state_machine_ctor}

$declare${AOs::AO_state_machine}

#endif /* BLINKY_H */
</text>
   </file>
  </directory>
 </directory>
</model>
